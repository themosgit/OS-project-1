Το πρόγραμμα βασίζεται σε 5 source files.

main.c:
Χειρίζεται τη βασική ροή του προγράμματος ανοίγοντας
input και output files δημιουργώντας και αρχικοποιώντας τον γράφο,
στη συνέχεια διαβάζει απο το χρήστη την εντολή miris και την
περνάει στη συνάρτηση commandPrompt() η οποία υλοποιείται στο prompt.c.
Αφού δοθεί εντολή exit τα περιεχόμενα του γράφου τυπώνονται στο output
file καταστρέφεται ο γράφος και τελείωνει το πρόγραμμα.

prompt.c:
Υλοποίηση συνάρτησης commandPrompt() δέχεται ενα string και κάνει τις
κατάλληλες ενέργειες για να εκτελέσει κάποια εντολή του miris.
Χρησιμοποιείται sscanf() για εξαγωγή της εντολής απο το string ή οποία
θα είναι κάποιο string ανάλογα με την εντολή χρησιμοποιείται η get_int()
για εξαγωγή τύπου int απο το command string που δίνεται η οποία κάνει χρήση
της strtok και μετακινεί το δείκτη του command για όσες θέσεις διάβασε.
Στη περίπτωση που υπάρχει ημερομηνία χρησιμοποιείται η sscanf().
H συνάρτηση ελέγχει επίσης αν το command το οποίο έδωσε ο χρήστης συμφωνεί
με τους κανόνες μορφοποίησης των εντολών του miris.

node.c:
Υλοποίηση δομής κατακερματισμού με map. Η δομή δεσμεύεται δυναμικά και χρησιμοποιεί
incremental rehashing για τη σταδιακή αντιγραφή στοιχείων του παλιού πίνακα στον νέο
κάθε φόρα που μεγαλώνει το μέγεθος του εν λόγω πίνακα αυτό έχει ως αποτέλεσμα μειωμένο
κόστος εισαγωγής σε περίπτωση που υπερβεί το load factor καθώς δε χρειάζεται να γίνει
πλήρης αντιγραφή του παλιού πίνακα σε ένα insert. Στη συγκεκριμένη υλοποίηση όταν
υπερβούμε το load factor καλούμε την hash_table_size_increase() στην οποία αρχικά
καταστρέφουμε τον τρέχον παλιό πίνακα και αρχικοποιούμε ξανά τον παλιό με τα στοιχεία
του τρέχοντος στη συνέχει δημιουργούμε το νέο πίνακα ο οποίος θα πάρει μέγεθος απο τον
prime_sizes που αποθηκεύονται πρώτη αριθμοί για μεγέθη που θα πάρει ο πίνακας καθώς
μεγαλώνει ιδανικό για χρήση σε δομή κατακερματισμού. Στη συνέχεια σε κάθε insert
καλείται η incremental_rehash() η οποία κάνει rehash το πολύ δύο στοιχεία του παλιού
βάση του rehashing index.Οι graph_create() και graph_destroy() αρχικοποιούν και
δεσμεύουν/αποδεσμεύουν την απαραίτητη μνήμη της δομής κατακερματισμού.

Nodes τα nodes αποθηκεύονται στο hash table και έχουν ένα id, δύο δομές linked list
Edges στην οποία αποθηκεύονται οι ακμές με originator το ίδιο το node καθώ και
incomingEdges στην οποία αποθηκεύονται id's Nodes εισερχομένων ακμών καθώς και πόσες
ακμές με το συγκεκριμένο originator Node υπάρχουν. Επίσης, υπάρχει το state το οποίο
είναι κρήσιμο στη δομή για λειτουργίες διαγραφής αναζήτησης εισαγωγής και rehashing.
η δομή node έχει λειτουργίες insert, delete, find. Οι οποίες λειτουργούν βασισμένες
στη δομή κατακερματισμού (αναλυτικότερα στον σχολιασμό του source code).

Να σημείωθει οτι στον εν λόγω αρχείο υλοποιούνται write_to_graph_to_file(), η οποία
γράφει όλες τις εγραφές του γράφου στο output file. dfsUtil() καλεί και αρχικοποίει
βοηθητικές μεταβλητές και δομές για χρήση απο τις dfs_circleFind(), dfs_traceFlow(),
dfs_connected(). Οι οποίες υλοποιούν εντολές του miris κάνοντας αναδρομικά dfs.

edge.c:
Υλοποίηση δομής linked list ακμών, κάθε ακμή έχει nextEdge την επόμενη ακμή, το id
του node στο οποίο δείχνει, βάρος και ημερομηνία. Έχει λειτουργίες insert, remove,
search, modify, print και destroy υλοποιούνται με απλές διαδικασίες linked list
(αναλυτικότερα στον σχολιασμό του source code).

Να σημειωθεί οτι η insert και remove edge είναι υπεύθυνες και για την ενημέρωση
της δεύτερης βοηθητικής δομής linked list του node την incomingNodes.

inNodes.c:
Υλοποίηση βοηθητικής δομής linked list incomingNodes, ο λόγος που χρησιμοποιείται
η δομή είναι η ταχύτερη λειτουργία του receiving command του miris καθώς και η
αφαίρεση ενός node απο το γράφο θα μπορούσε να χρησιμοποιηθεί και για bi-directional
search ανάμεσα στα nodes αλλά κάτι τέτοιο δεν έχει υλοποιηθεί. Περίεχει το επόμενο
στοιχείο linked list, το id του source node κάποιος ακμής και πόσες φορές εμφανίζονται
ακμές απο το συγκεκριμένο source node. Έχει λειτουργίες insert, remove, search, print
και destroy (αναλυτικότερα στον σχολιασμό του source code).

Δυσλειτουργίες προγράμματος:
    > Υπάρχουν memory leaks.
    > εντολές circleFind, Findcircles εκτυπώνουν ένα μόνo path.




